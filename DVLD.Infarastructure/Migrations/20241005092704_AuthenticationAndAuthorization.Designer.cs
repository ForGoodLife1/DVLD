// <auto-generated />
using System;
using DVLD.Infrastructure.DvldDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DVLD.Infrastructure.Migrations
{
    [DbContext(typeof(DvldContext))]
    [Migration("20241005092704_AuthenticationAndAuthorization")]
    partial class AuthenticationAndAuthorization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AI")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DVLD.Data.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int>("ApplicantPersonId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicantPersonID");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ApplicationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("1-New 2-Cancelled 3-Completed");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationTypeID");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<DateTime>("LastStatusDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicantPersonId");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DVLD.Data.Entities.ApplicationType", b =>
                {
                    b.Property<int>("ApplicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationTypeId"));

                    b.Property<decimal>("ApplicationFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("ApplicationTypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ApplicationTypeId");

                    b.ToTable("ApplicationTypes");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId")
                        .HasName("PK__Countrie__10D160BFDBD6933F");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DVLD.Data.Entities.DetainedLicense", b =>
                {
                    b.Property<int>("DetainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DetainID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetainId"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<DateTime>("DetainDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("FineFees")
                        .HasColumnType("smallmoney");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int")
                        .HasColumnName("LicenseID");

                    b.Property<int?>("ReleaseApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ReleaseApplicationID");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ReleasedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("ReleasedByUserID");

                    b.HasKey("DetainId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("ReleaseApplicationId");

                    b.HasIndex("ReleasedByUserId");

                    b.ToTable("DetainedLicenses");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.HasKey("DriverId")
                        .HasName("PK_Drivers_1");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("PersonId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DVLD.Data.Entities.DriversView", b =>
                {
                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<string>("FullNameAr")
                        .IsRequired()
                        .HasMaxLength(83)
                        .HasColumnType("nvarchar(83)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(83)
                        .HasColumnType("nvarchar(83)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("NumberOfActiveLicenses")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.ToTable((string)null);

                    b.ToView("Drivers_View", (string)null);
                });

            modelBuilder.Entity("DVLD.Data.Entities.Identity.IdUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DVLD.Data.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DVLD.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("DVLD.Data.Entities.InternationalLicense", b =>
                {
                    b.Property<int>("InternationalLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InternationalLicenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternationalLicenseId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IssuedUsingLocalLicenseId")
                        .HasColumnType("int")
                        .HasColumnName("IssuedUsingLocalLicenseID");

                    b.HasKey("InternationalLicenseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("IssuedUsingLocalLicenseId");

                    b.ToTable("InternationalLicenses");
                });

            modelBuilder.Entity("DVLD.Data.Entities.License", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LicenseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IssueReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasComment("1-FirstTime, 2-Renew, 3-Replacement for Damaged, 4- Replacement for Lost.");

                    b.Property<int>("LicenseClass")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.HasKey("LicenseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LicenseClass");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("DVLD.Data.Entities.LicenseClass", b =>
                {
                    b.Property<int>("LicenseClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LicenseClassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseClassId"));

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ClassFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("DefaultValidityLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasComment("How many years the licesnse will be valid.");

                    b.Property<byte>("MinimumAllowedAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)18)
                        .HasComment("Minmum age allowed to apply for this license");

                    b.HasKey("LicenseClassId");

                    b.ToTable("LicenseClasses");
                });

            modelBuilder.Entity("DVLD.Data.Entities.LocalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocalDrivingLicenseApplicationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalDrivingLicenseApplicationId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationID");

                    b.Property<int>("LicenseClassId")
                        .HasColumnType("int")
                        .HasColumnName("LicenseClassID");

                    b.HasKey("LocalDrivingLicenseApplicationId")
                        .HasName("PK_DrivingLicsenseApplications");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseClassId");

                    b.ToTable("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DVLD.Data.Entities.LocalDrivingLicenseApplicationsView", b =>
                {
                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ClassNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullNameAr")
                        .IsRequired()
                        .HasMaxLength(83)
                        .HasColumnType("nvarchar(83)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(83)
                        .HasColumnType("nvarchar(83)");

                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("LocalDrivingLicenseApplicationID");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PassedTestCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.ToTable((string)null);

                    b.ToView("LocalDrivingLicenseApplications_View", (string)null);
                });

            modelBuilder.Entity("DVLD.Data.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstNameAr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Gendor")
                        .HasColumnType("tinyint")
                        .HasComment("0 Male , 1 Femail");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastNameAr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NationalityCountryId")
                        .HasColumnType("int")
                        .HasColumnName("NationalityCountryID");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondNameAr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondNameEn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThirdNameAr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThirdNameEn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PersonId");

                    b.HasIndex("NationalityCountryId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TestAppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("TestAppointmentID");

                    b.Property<bool>("TestResult")
                        .HasColumnType("bit")
                        .HasComment("0 - Fail 1-Pass");

                    b.HasKey("TestId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TestAppointmentId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("DVLD.Data.Entities.TestAppointment", b =>
                {
                    b.Property<int>("TestAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestAppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestAppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("LocalDrivingLicenseApplicationID");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TestTypeID");

                    b.HasKey("TestAppointmentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LocalDrivingLicenseApplicationId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestAppointments");
                });

            modelBuilder.Entity("DVLD.Data.Entities.TestAppointmentsView", b =>
                {
                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ClassNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullNameAr")
                        .IsRequired()
                        .HasMaxLength(83)
                        .HasColumnType("nvarchar(83)");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasMaxLength(83)
                        .HasColumnType("nvarchar(83)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("LocalDrivingLicenseApplicationID");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.Property<int>("TestAppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("TestAppointmentID");

                    b.Property<string>("TestTypeTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable((string)null);

                    b.ToView("TestAppointments_View", (string)null);
                });

            modelBuilder.Entity("DVLD.Data.Entities.TestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeId"));

                    b.Property<string>("TestTypeDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TestTypeFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("TestTypeTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestTypeId");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("DVLD.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<string>("UserNameAr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserNameEn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DVLD.Data.Entities.Application", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Person", "ApplicantPerson")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicantPersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Applications_People");

                    b.HasOne("DVLD.Data.Entities.ApplicationType", "ApplicationType")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Applications_ApplicationTypes");

                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("Applications")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Applications_Users");

                    b.Navigation("ApplicantPerson");

                    b.Navigation("ApplicationType");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("DVLD.Data.Entities.DetainedLicense", b =>
                {
                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("DetainedLicenseCreatedByUsers")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_DetainedLicenses_Users");

                    b.HasOne("DVLD.Data.Entities.License", "License")
                        .WithMany("DetainedLicenses")
                        .HasForeignKey("LicenseId")
                        .IsRequired()
                        .HasConstraintName("FK_DetainedLicenses_Licenses");

                    b.HasOne("DVLD.Data.Entities.Application", "ReleaseApplication")
                        .WithMany("DetainedLicenses")
                        .HasForeignKey("ReleaseApplicationId")
                        .HasConstraintName("FK_DetainedLicenses_Applications");

                    b.HasOne("DVLD.Data.Entities.User", "ReleasedByUser")
                        .WithMany("DetainedLicenseReleasedByUsers")
                        .HasForeignKey("ReleasedByUserId")
                        .HasConstraintName("FK_DetainedLicenses_Users1");

                    b.Navigation("CreatedByUser");

                    b.Navigation("License");

                    b.Navigation("ReleaseApplication");

                    b.Navigation("ReleasedByUser");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Driver", b =>
                {
                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("Drivers")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Drivers_Users");

                    b.HasOne("DVLD.Data.Entities.Person", "Person")
                        .WithMany("Drivers")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Drivers_People");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Identity.IdUser", "user")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DVLD.Data.Entities.InternationalLicense", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Application", "Application")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Applications");

                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Users");

                    b.HasOne("DVLD.Data.Entities.Driver", "Driver")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Drivers");

                    b.HasOne("DVLD.Data.Entities.License", "IssuedUsingLocalLicense")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("IssuedUsingLocalLicenseId")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Licenses");

                    b.Navigation("Application");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Driver");

                    b.Navigation("IssuedUsingLocalLicense");
                });

            modelBuilder.Entity("DVLD.Data.Entities.License", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Application", "Application")
                        .WithMany("Licenses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_Applications");

                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("Licenses")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_Users");

                    b.HasOne("DVLD.Data.Entities.Driver", "Driver")
                        .WithMany("Licenses")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_Drivers");

                    b.HasOne("DVLD.Data.Entities.LicenseClass", "LicenseClassNavigation")
                        .WithMany("Licenses")
                        .HasForeignKey("LicenseClass")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_LicenseClasses");

                    b.Navigation("Application");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Driver");

                    b.Navigation("LicenseClassNavigation");
                });

            modelBuilder.Entity("DVLD.Data.Entities.LocalDrivingLicenseApplication", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Application", "Application")
                        .WithMany("LocalDrivingLicenseApplications")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_DrivingLicsenseApplications_Applications");

                    b.HasOne("DVLD.Data.Entities.LicenseClass", "LicenseClass")
                        .WithMany("LocalDrivingLicenseApplications")
                        .HasForeignKey("LicenseClassId")
                        .IsRequired()
                        .HasConstraintName("FK_DrivingLicsenseApplications_LicenseClasses");

                    b.Navigation("Application");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Person", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Country", "NationalityCountry")
                        .WithMany("People")
                        .HasForeignKey("NationalityCountryId")
                        .IsRequired()
                        .HasConstraintName("FK_People_Countries1");

                    b.Navigation("NationalityCountry");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Test", b =>
                {
                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("Tests")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tests_Users");

                    b.HasOne("DVLD.Data.Entities.TestAppointment", "TestAppointment")
                        .WithMany("Tests")
                        .HasForeignKey("TestAppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Tests_TestAppointments");

                    b.Navigation("CreatedByUser");

                    b.Navigation("TestAppointment");
                });

            modelBuilder.Entity("DVLD.Data.Entities.TestAppointment", b =>
                {
                    b.HasOne("DVLD.Data.Entities.User", "CreatedByUser")
                        .WithMany("TestAppointments")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_TestAppointments_Users");

                    b.HasOne("DVLD.Data.Entities.LocalDrivingLicenseApplication", "LocalDrivingLicenseApplication")
                        .WithMany("TestAppointments")
                        .HasForeignKey("LocalDrivingLicenseApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_TestAppointments_LocalDrivingLicenseApplications");

                    b.HasOne("DVLD.Data.Entities.TestType", "TestType")
                        .WithMany("TestAppointments")
                        .HasForeignKey("TestTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TestAppointments_TestTypes");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LocalDrivingLicenseApplication");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("DVLD.Data.Entities.User", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_People");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Identity.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Identity.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVLD.Data.Entities.Identity.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DVLD.Data.Entities.Identity.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DVLD.Data.Entities.Application", b =>
                {
                    b.Navigation("DetainedLicenses");

                    b.Navigation("InternationalLicenses");

                    b.Navigation("Licenses");

                    b.Navigation("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DVLD.Data.Entities.ApplicationType", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Country", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Driver", b =>
                {
                    b.Navigation("InternationalLicenses");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Identity.IdUser", b =>
                {
                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("DVLD.Data.Entities.License", b =>
                {
                    b.Navigation("DetainedLicenses");

                    b.Navigation("InternationalLicenses");
                });

            modelBuilder.Entity("DVLD.Data.Entities.LicenseClass", b =>
                {
                    b.Navigation("Licenses");

                    b.Navigation("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DVLD.Data.Entities.LocalDrivingLicenseApplication", b =>
                {
                    b.Navigation("TestAppointments");
                });

            modelBuilder.Entity("DVLD.Data.Entities.Person", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Drivers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DVLD.Data.Entities.TestAppointment", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DVLD.Data.Entities.TestType", b =>
                {
                    b.Navigation("TestAppointments");
                });

            modelBuilder.Entity("DVLD.Data.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("DetainedLicenseCreatedByUsers");

                    b.Navigation("DetainedLicenseReleasedByUsers");

                    b.Navigation("Drivers");

                    b.Navigation("InternationalLicenses");

                    b.Navigation("Licenses");

                    b.Navigation("TestAppointments");

                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
